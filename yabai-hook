#!/usr/bin/env coffee

fs   = require "fs"
exec = require("child_process").exec

# 該当箇所の前後でプレビューする行数
previewLines = 3

# エスケープシーケンス列挙
color = ['black', 'red', 'green', 'yellow', 'blue', 'purple', 'cyan', 'gray']

escapeByCode = (str) -> "\x1b[#{str}m"

bg = color.reduce (prev, curr, index) ->
  colorCode = index + 40
  prev[curr] = escapeByCode colorCode
  prev
, {}

fg = color.reduce (prev, curr, index) ->
  colorCode = index + 30
  prev[curr] = escapeByCode colorCode
  prev
, {}

cls = escapeByCode '0'
bold = escapeByCode '1'
underline = escapeByCode '4'
inverse = escapeByCode '7'

isNumber = (val) -> typeof val == 'number' && !isNaN val
isNotEmpty = (val) -> val.trim().length != 0

endsWithWhiteSpacesPattern = /(\s+$)/
endsWithEmptyRowPattern = /(\s+$)/

highlightWhiteSpaces = (row) ->
  row.replace endsWithWhiteSpacesPattern, "#{inverse}#{underline}$1#{cls}"

appendRowNumber = (row, index) ->
  # 5桁決め打ちでいいのか?
  rowNumber = (' ' + (index + 1)).slice(-5)
  "#{inverse}#{rowNumber} #{cls} #{row}"

getHighlightRows = (rows, target, start, end) ->
  part = rows.slice start, end
  part.map (row, offset) ->
    index = start + offset
    appendRowNumber highlightWhiteSpaces(row), index

getRangeOfNeigborRow = (rows, index, width) ->
  start: Math.max index - width, 0
  end: Math.min index + width, rows.length - 1

getNumbersOfRowEndingWithWhiteSpaces = (rows) ->
  isEndingWithWhiteSpaces = (row) ->
    Boolean(row.match endsWithWhiteSpacesPattern)

  rows.map (row, index) ->
    index if isEndingWithWhiteSpaces(row)
  .filter(isNumber)

isEndingWithEmptyRows = (content) ->
  Boolean(content.match endsWithEmptyRowPattern)

getWhiteSpacesErrorMessage = (fileName, index) ->
  "#{bg.blue}#{fileName} の #{index + 1} 行目の末尾に余分な空白があります#{cls}"

getEmptyRowErrorMessage = (fileName, index) ->
  "#{bg.purple}#{fileName} の末尾に余分な空行があります#{cls}"

exec 'git diff --cached --name-only', (err, stdoutFromGit, stderr) ->
  # git diff からの標準出力を受け取ってファイル名に分割
  fileNames = stdoutFromGit.split('\n').filter isNotEmpty

  (iterate = (output) ->
    fileName = fileNames.shift()

    unless fileName?
      console.log(output.join('\n\n'))
      process.exit Math.min output.length, 1

    fs.readFile fileName, 'utf8', (err, content) ->
      if err?
        console.log '#{bg.red}ファイルの読み込みに失敗しました#{cls}'
        return

      rows = content.split '\n'
      output = output.concat(getNumbersOfRowEndingWithWhiteSpaces(rows)
        .map (index) ->
          {start, end} = getRangeOfNeigborRow rows, index, previewLines
          codePreview = getHighlightRows(rows, index, start, end)
          errorMessage = getWhiteSpacesErrorMessage(fileName, index)
          [errorMessage].concat(codePreview).join('\n')
      )

      if isEndingWithEmptyRows(content)
        output.push(getEmptyRowErrorMessage(fileName))

      iterate(output)
  )([])